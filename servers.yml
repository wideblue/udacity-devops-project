Description: >
  Damjan Dvor≈°ek / Udacity devops project 2, servers infrastructure

Parameters:

  EnvironmentName:
    Description: An Environment name that will be prefixed to resources
    Type: String    
  SshAccessCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: The CIDR IP range that is permitted to SSH to bastion instance. Note - a value of 0.0.0.0/0 will allow access from ANY IP address.
    Type: String
    Default: 0.0.0.0/0
  WebAsgMax:
    AllowedPattern: ^((?!0$)[1-2]?[0-9]|30)$
    ConstraintDescription: Must be a number between 1 and 30.
    Default: 4
    Description: Specifies the maximum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebAsgMin:
    AllowedPattern: ^([0-0]?[0-9]|10)$
    ConstraintDescription: Must be a number between 0 and 10.
    Default: 2
    Description: Specifies the minimum number of EC2 instances in the Web Autoscaling Group.
    Type: String
  WebInstanceType:
    Default: t2.micro
    Description: The Amazon EC2 instance type for your web instances.
    Type: String
  WebImageId:
    Default: ami-003634241a8fcdec0
    Description: The Amazon EC2  AMI image for your web instances.
    Type: String
  EC2KeyName:
    ConstraintDescription: Must be letters (upper or lower), numbers, and special characters.
    Description: Name of an EC2 KeyPair. Your bastion & Web instances will launch with this KeyPair.
    Type: AWS::EC2::KeyPair::KeyName    


Resources:

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bastion instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SshAccessCidr
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC"

  PublicAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC"    

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for web instances
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PublicAlbSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC"


  PublicAlbListenerNoSslCertificate:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref PublicAlbTargetGroup
      LoadBalancerArn: !Ref PublicApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  PublicApplicationLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet0"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet1"
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: 60
      SecurityGroups:
      - !Ref PublicAlbSecurityGroup
      Tags:
      - Key: Name
        Value: !Join [ '', [ 'Public ALB / ', !Ref 'AWS::StackName' ] ]
  # NOTE: We might not need this if we use LB for just one app/path or hostname,
  # but it is usefull if we want to use same LB for different apps or hostenames.
  # https://cevo.com.au/post/2019-02-24-using-host-based-routing-with-alb      
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'PublicAlbTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'PublicAlbListenerNoSslCertificate'
        Priority: 1
  PublicAlbTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 20
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Join [ '', [ 'Public ALB / ', !Ref 'AWS::StackName' ] ]
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPC"


  WebInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref WebInstanceRole
  WebInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: s3
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:ListBucket
            - s3:ListBucketVersions
            - s3:GetObject
            - s3:GetObjectVersio
            Resource: "*"
            # - arn:aws:s3:*:*:*
  WebAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 60
      HealthCheckGracePeriod: 120
      # HealthCheckType: ELB
      LaunchConfigurationName:
          !Ref WebAppLaunchConfig
      MaxSize: !Ref WebAsgMax
      MinSize: !Ref WebAsgMin
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'Web ASG / ', !Ref 'AWS::StackName' ] ]
          PropagateAtLaunch: true
      TargetGroupARNs:
        - !Ref PublicAlbTargetGroup
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub "${EnvironmentName}-WEB-NETS"            
    # CreationPolicy:
    #   ResourceSignal:
    #     Count: !Ref WebAsgMin
    #     Timeout: PT5M   
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip

      IamInstanceProfile: !Ref WebInstanceProfile
      ImageId: !Ref WebImageId
      InstanceMonitoring: true
      InstanceType: !Ref WebInstanceType
      KeyName: !Ref EC2KeyName
      SecurityGroups:
      - !Ref WebSecurityGroup
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

Outputs:
  PublicApplicationLoadBalancerDNSName:
    Description: Application LoadBalancer public DNS Name.
    Value: !Join [ "", [ "http://", !GetAtt PublicApplicationLoadBalancer.DNSName ] ]
    Export:
      Name: !Sub ${EnvironmentName}-PublicApplicationLoadBalancerDNSName
  BastionSecurityGroup:
    Value: !Ref BastionSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-BastionSecurityGroup
  PublicAlbSecurityGroup:
    Value: !Ref PublicAlbSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-PublicAlbSecurityGroup
  WebSecurityGroup:
    Value: !Ref WebSecurityGroup
    Export:
      Name: !Sub ${EnvironmentName}-WebSecurityGroup